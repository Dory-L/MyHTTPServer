一、mmap
1、私有映射(MAP_PRIVATE)
多进程间数据共享，修改不反应到磁盘实际文件，是一个copy-on-write（写时复制）的映射方式。
2、共享映射(MAP_SHARED)
多进程间数据共享，修改反应到磁盘实际文件中。

函数原型
void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);
返回说明
成功执行时，mmap()返回被映射区的指针。失败时，mmap()返回MAP_FAILED[其值为(void *)-1]， 设置errno。
参数
start：映射区的开始地址
length：映射区的长度
prot：期望的内存保护标志，不能与文件的打开模式冲突。是以下的某个值，可以通过or运算合理地组合在一起
    1 PROT_EXEC ：页内容可以被执行
    2 PROT_READ ：页内容可以被读取
    3 PROT_WRITE ：页可以被写入
    4 PROT_NONE ：页不可访问
flags：指定映射对象的类型，映射选项和映射页是否可以共享。它的值可以是一个或者多个以下位的组合体
    1 MAP_FIXED //使用指定的映射起始地址，如果由start和len参数指定的内存区重叠于现存的映射空间，重叠部分将会被丢弃。如果指定的起始地址不可用，操作将会失败。并且起始地址必须落在页的边界上。
    2 MAP_SHARED //与其它所有映射这个对象的进程共享映射空间。对共享区的写入，相当于输出到文件。直到msync()或者munmap()被调用，文件实际上不会被更新。
    3 MAP_PRIVATE //建立一个写入时拷贝的私有映射。内存区域的写入不会影响到原文件。这个标志和以上标志是互斥的，只能使用其中一个。
    4 MAP_DENYWRITE //这个标志被忽略。
    5 MAP_EXECUTABLE //同上
    6 MAP_NORESERVE //不要为这个映射保留交换空间。当交换空间被保留，对映射区修改的可能会得到保证。当交换空间不被保留，同时内存不足，对映射区的修改会引起段违例信号。
    7 MAP_LOCKED //锁定映射区的页面，从而防止页面被交换出内存。
    8 MAP_GROWSDOWN //用于堆栈，告诉内核VM系统，映射区可以向下扩展。
    9 MAP_ANONYMOUS //匿名映射，映射区不与任何文件关联。
    10 MAP_ANON //MAP_ANONYMOUS的别称，不再被使用。
    11 MAP_FILE //兼容标志，被忽略。
    12 MAP_32BIT //将映射区放在进程地址空间的低2GB，MAP_FIXED指定时会被忽略。当前这个标志只在x86-64平台上得到支持。
    13 MAP_POPULATE //为文件映射通过预读的方式准备好页表。随后对映射区的访问不会被页违例阻塞。
    14 MAP_NONBLOCK //仅和MAP_POPULATE一起使用时才有意义。不执行预读，只为已存在于内存中的页面建立页表入口。
fd：有效的文件描述词。如果MAP_ANONYMOUS被设定，为了兼容问题，其值应为-1
offset：被映射对象内容的起点

相关函数
int munmap( void * addr, size_t len ) 
成功执行时，munmap()返回0。失败时，munmap返回-1，error返回标志和mmap一致；
该调用在进程地址空间中解除一个映射关系，addr是调用mmap()时返回的地址，len是映射区的大小；
当映射关系解除后，对原来映射地址的访问将导致段错误发生。 

int msync( void *addr, size_t len, int flags )
一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap（）后才执行该操作。
可以通过调用msync()实现磁盘上文件内容与共享内存区的内容一致。

二、va_list
    1）va_list：一个字符指针，可以理解为指向当前参数的一个指针，取参必须通过这个指针进行。

    2）va_start：对ap进行初始化，让ap指向可变参数表里面的第一个参数。第一个参数是 ap 本身，第二个参数是在变参表前面紧挨着的一个变量，即“...”之前的那个参数；

    3）va_arg: 获取参数。它的第一个参数是ap，第二个参数是要获取的参数的指定类型。按照指定类型获取当前参数，返回这个指定类型的值，然后把 ap 的位置指向变参表中下一个变量的位置；

    4）va_end：释放指针，将输入的参数 ap 置为 NULL。通常va_start和va_end是成对出现。 

三、无名信号量
头文件： <semaphore.h>
int sem_init(sem_t *sem, int pshared,unsigned value);
功能：初始化指定的信号量
返回值：成功 0 ； 错误 错误号。
参数说明：sem：信号量变量名；参数value为信号量的初始值。
参数pshared用于说明信号量的共享范围，如果pshared为0，那么该信号量只能由初始化这个信号量的进程中的线程使用，如果pshared非零，任何可以访问到这个信号量的进程都可以使用这个信号量。
必须保证只调用sem_init()进行初始化一次，对于一个已初始化过的信号量调用sem_init()的行为是未定义的

int sem_destroy(sem_t *sem);
功能：销毁一个指定的信号量
返回值：成功 0 ； 错误 错误号。
参数说明：sem：信号量变量名（sem_init内值）
摧毁一个有线程阻塞在其上的信号量的行为是未定义的。

P操作：
int sem_trywait(sem_t *sem);
int sem_wait(sem_t *sem);
int sem_timedwait(sem_t * sem, const struct timespec time); 
减1信号量的值。信号量值为0时，sem_wait会阻塞，直到成功使信号量减1或者被信号中断时才返回；
sem_trywait为非阻塞版本，当信号量为0时，该函数返回-1并且将errno置为EAGAIN
sem_timedwait带有超时功能，超时到期并且信号量计数没能减1，sem_timedwait将返回-1且将errno设置为ETIMEDOUT。（毕竟一直阻塞也不是办法。。）

V操作：
int sem_post(sem_t *sem);
信号量加1，若此时有sem_wait正在阻塞则唤醒执行。

取值操作：
int sem_t getvalue(sem_t sem, int *val);
获取信号量的值，一般只用来调试，打印val查看。

四、条件变量
创建与销毁
    1. 创建条件变量
    Pthreads 用 pthread_cond_t 类型的变量来表示条件变量。程序必须在使用 pthread_cond_t变量之前对其进行初始化。
    （1） 静态初始化
        对于静态分配的变量可以简单地将 PTHREAD_COND_INITIALIZER 赋值给变量来初始化默认行为的条件变量。
        pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

    （2）动态初始化
        对动态分配或者不使用默认属性的条件变量来说可以使用 pthread _cond_init()来初始化。函数原型如下：
        int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);
        参数 cond 是一个指向需要初始化 pthread_cond_t 变量的指针，参数 attr 传递 NULL 值时， pthread_cond_init()将 cond 初始化为默认属性的条件变量。
        函数成功将返回 0；否则返回一个非 0 的错误码。
        静态初始化程序通常比调用 pthread_cond_init()更有效，而且在任何线程开始执行之前，确保变量被执行一次。
        以下代码示例了条件变量的初始化。
        pthread_cond_t cond;
        int error;
        if (error = pthread_cond_init(&cond, NULL));
        　　fprintf(stderr, "Failed to initialize cond : %s\n", strerror(error)); 

    2. 销毁条件变量
    函数 pthread_cond_destroy()用来销毁它参数所指出的条件变量，函数原型如下：
    int pthread_cond_destroy(pthread_cond_t *cond);
    函数成功调用返回 0，否则返回一个非 0 的错误码。以下代码演示了如何销毁一个条件变量。
    pthread_cond_t cond;
    int error;
    if (error = pthread_cond_destroy(&cond))
    　　fprintf(stderr, "Failed to destroy cond : %s\n", strerror(error));

等待与通知
    等待 
    条件变量是与条件测试一起使用的，通常线程会对一个条件进行测试，如果条件不满足就会调用条件等待函数来等待条件满足。
    条件等待函数有 pthread_cond_wait()pthread_cond_timedwait()和两个，函数原型如下：
    int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
    int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);
    
    pthread_cond_wait()函数在条件不满足时将一直等待， 而 pthread_cond_timedwait()将只等待一段时间。
    参数 cond 是一个指向条件变量的指针，参数 mutex 是一个指向互斥量的指针，线程在调用前应该拥有这个互斥量，当线程要加入条件变量的等待队列时，等待操作会使线程释放这个互斥量。 pthread_timedwait()的第三个参数 abstime 是一个指向返回时间的指针，如果条件变量通知信号没有在此等待时间
    之前出现，等待将超时退出， abstime 是个绝对时间，而不是时间间隔。

    以上函数成功调用返回 0，否则返回非 0 的错误码，其中 pthread_cond_timedwait（） 函数如果 abstime 指定的时间到期，错误码为 ETIMEOUT。
    以下代码使得线程进入等待，直到收到通知并且满足 a 大于等于 b 的条件。
    pthread_mutex_lock(&mutex)
    while(a < b)
    　　pthread_cond_wait(&cond, &mutex)
    pthread_mutex_unlock(&mutex)

    
    通知 
    当另一个线程修改了某参数可能使得条件变量所关联的条件变成真时，它应该通知一个或者多个等待在条件变量等待队列中的线程。
    条件通知函数有 pthread_cond_signal()和 pthread_cond_broadcast()函数，其中 pthread_cond_signal 函数可以唤醒一个在条件变量等待队列等待的线程，而 pthread_cond_broadcast函数可以所有在条件变量等待队列等待的线程。函数原型如下：

    int pthread_cond_broadcast(pthread_cond_t *cond);
    int pthread_cond_signal(pthread_cond_t *cond);
    参数 cond 是一个指向条件变量的指针。函数成功返回 0，否则返回一个非 0 的错误码。

五、信号
int sigaction(int signum, const struct sigaction *act,  struct sigaction *oldact);
signum指定信号，可以是除SIGKILL和SIGSTOP之外的任何有效信号。
如果act为非NULL，则从act安装信号符号的新操作。如果oldact为非NULL，则旧的act保存在oldact中。
The sigaction structure is defined as something like:
    struct sigaction {
        void     (*sa_handler)(int);
        void     (*sa_sigaction)(int, siginfo_t *, void *);
        sigset_t   sa_mask;
        int        sa_flags;
        void     (*sa_restorer)(void);
    };
在某些体系结构中涉及到联合体：不要同时分配给sa_handler和sa_sigaction。
sa_restorer字段不适用于应用程序。
sa_handler指定要与signum关联的操作，并且可以是默认操作的SIG_DFL，忽略此信号或指向信号处理函数的指针的信号。此功能接收信号数字作为它的唯一参数。
如果在sa_flags中指定了SA_SIGINFO，则sa_sigaction（而不是SA_handler）将为信号signum指定signal-handling函数。此函数接收三个参数，如下所述。
sa_mask设置进程的信号掩码（在原有信号掩码的基础上）。此外，该信号除非使用SA_NODEFER标志，否则处理程序将被阻止。
信号集函数：
    #include <signal.h>
    int sigemptyset(sigset_t* _set) //清空信号集
    int sigfillset(sigset_t* _set)//在信号集中设置所有信号
    int sigaddset(sigset_t* _set, int _signo)//将信号_signo添加至信号集中
    int sigdelset(sigset_t* _set, int _signo)//将信号_signo从信号集中删除
    int sigismember(_const sigset_t* _set, int _signo)//测试_signo是否在信号集中
sa_flags指定一组修改信号行为的标志。它是由按位或的以下零项或多项：
    SA_INTERRUPT 由此信号中断的系统调用不会自动重启
    SA_RESTART 由此信号中断的系统调用会自动重启
    SA_SIGINFO 提供附加信息，一个指向siginfo结构的指针以及一个指向进程上下文标识符的指针
    SA_NODEFER 一般情况下，当信号处理函数运行时，内核将阻塞(sigaction函数注册时的信号)。但是如果设置了SA_NODEFER标记， 那么在该信号处理函数运行时，内核将不会阻塞该信号。
    SA_RESETHAND  当调用信号处理函数时或信号处理函数结束后，将信号的处理设置为系统默认值。 

被挂起的信号
    #include <signal.h>
    int sigpending(sigset* _set);
    接收进程当前被挂起信号的信号集
    return 成功0 失败-1，errno

六、Linux Socket SO_LINGER选项
    SO_LINGER 选项可以用来控制调用close函数关闭socket后的行为。 
    struct linger
    {
        int l_onoff;		/* Nonzero to linger on close.  */
        int l_linger;		/* Time to linger.  */
    };
    有下列三种情况：
    1、设置 l_onoff为0，l_linger的值被忽略，等于内核缺省情况，close调用会立即返回给调用者，TCP模块负责尝试发送残留的缓冲区数据。
    2、设置 l_onoff为1，l_linger为0，则连接立即终止，TCP将丢弃残留在发送缓冲区中的数据并发送一个RST给对方，而不是通常的四分组终止序列，这避免了TIME_WAIT状态；在远端的recv()调用将以WSAECONNRESET出错。
    3、设置 l_onoff为1，l_linger > 0：
        如果socket为阻塞的，则close将阻塞等待l_linger 秒的时间，如果在l_linger秒时间内，TCP模块成功发送完残留的缓冲区数据，则close返回0，表示成功。如果l_linger时间内，TCP模块没有成功发送完残留的缓冲区数据，则close返回-1，表示失败，并将errno设置为EWOULDBLOCK。
        如果socket为非阻塞，close立即返回，此时需要根据close返回值以及errno来判断TCP模块是否成功发送残留的缓冲区数据。
